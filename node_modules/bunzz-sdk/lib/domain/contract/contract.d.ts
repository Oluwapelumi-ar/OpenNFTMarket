import { ethers } from 'ethers';
import { TrackActionFunction } from '../../utils/trackAction';
export declare type ContractMap = {
    [key: string]: Contract;
};
export declare type ContractConfig = {
    name: string;
    abi: any;
    address: string;
};
declare type Prop = {
    name: string;
    type: string;
};
declare type ABI = {
    inputs: Prop[];
    outputs: Prop[];
    name: string;
    stateMutability: 'nonpayble' | 'payable' | 'view' | 'pure';
    type: 'function' | 'event' | 'constructor' | 'fallback';
};
declare type ContractFunction<T = any> = (...args: Array<any>) => Promise<T>;
export declare type Contract = {
    [key: string]: ContractFunction;
} & BaseContract;
export declare class BaseContract {
    private readonly name;
    private readonly provider;
    private readonly ethersContract;
    private readonly trackAction;
    private readonly abis;
    constructor(config: ContractConfig, provider: ethers.providers.JsonRpcProvider, trackAction: TrackActionFunction);
    getAbi(name: string): ABI[];
    getAddress(): string;
    private attachFunctions;
    private getFunctionNameOnEthers;
    private getInputTypes;
    private buildDefaultFunction;
    private buildStrictFunction;
    private callReadAction;
    private callUpdateAction;
    private getMatchedAbi;
    private searchTypeMatchedAbi;
    private verifyArgumentType;
    private isUpdatableOption;
}
export {};
