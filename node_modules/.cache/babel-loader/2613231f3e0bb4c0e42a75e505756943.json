{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC3\\\\Documents\\\\WEB3\\\\bunzzhack\\\\erc721-minting-boilerplate\\\\react\\\\src\\\\components\\\\ERC721Checker.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ERC721Checker = ({\n  bunzz,\n  userAddress\n}) => {\n  _s();\n\n  const [tokenId, setTokenId] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [onGoing, setOnGoing] = useState(false);\n\n  const submit = async () => {\n    setOnGoing(true);\n\n    try {\n      const contract = await bunzz.getContract(\"NFT (IPFS Mintable)\");\n      const {\n        data: tokenUri\n      } = await contract.tokenURI(tokenId);\n      const url = tokenUri.replace(/^ipfs:\\/\\//, \"https://ipfs.io/ipfs/\");\n      const res = await fetch(url);\n      const data = await res.json();\n      setName(data.name);\n      setDescription(data.description);\n      setImage(data.image.replace(/^ipfs:\\/\\//, \"https://ipfs.io/ipfs/\"));\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setOnGoing(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"title\",\n      children: \"Step2: Get your NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"token ID\",\n      value: tokenId,\n      onChange: e => setTokenId(e.target.value),\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), onGoing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submit,\n      children: \"get\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), name ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Name: \", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), description ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Description: \", description]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), image ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: \"image\",\n      className: \"image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ERC721Checker, \"qFoctTG3GUiXqKjbiRPWxetESm0=\");\n\n_c = ERC721Checker;\n\nvar _c;\n\n$RefreshReg$(_c, \"ERC721Checker\");","map":{"version":3,"sources":["C:/Users/PC3/Documents/WEB3/bunzzhack/erc721-minting-boilerplate/react/src/components/ERC721Checker.jsx"],"names":["useState","ERC721Checker","bunzz","userAddress","tokenId","setTokenId","name","setName","description","setDescription","image","setImage","onGoing","setOnGoing","submit","contract","getContract","data","tokenUri","tokenURI","url","replace","res","fetch","json","err","console","error","e","target","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA4B;AAAA;;AACvD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMc,MAAM,GAAG,YAAY;AACzBD,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMb,KAAK,CAACc,WAAN,CAAkB,qBAAlB,CAAvB;AACA,YAAM;AAAEC,QAAAA,IAAI,EAAEC;AAAR,UAAqB,MAAMH,QAAQ,CAACI,QAAT,CAAkBf,OAAlB,CAAjC;AACA,YAAMgB,GAAG,GAAGF,QAAQ,CAACG,OAAT,CAAiB,YAAjB,EAA+B,uBAA/B,CAAZ;AACA,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAD,CAAvB;AACA,YAAMH,IAAI,GAAG,MAAMK,GAAG,CAACE,IAAJ,EAAnB;AACAjB,MAAAA,OAAO,CAACU,IAAI,CAACX,IAAN,CAAP;AACAG,MAAAA,cAAc,CAACQ,IAAI,CAACT,WAAN,CAAd;AACAG,MAAAA,QAAQ,CAACM,IAAI,CAACP,KAAL,CAAWW,OAAX,CAAmB,YAAnB,EAAiC,uBAAjC,CAAD,CAAR;AACD,KATD,CASE,OAAOI,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD,KAXD,SAWU;AACRZ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAhBD;;AAkBA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AAAG,MAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,WAAW,EAAC,UADd;AAEE,MAAA,KAAK,EAAET,OAFT;AAGE,MAAA,QAAQ,EAAGwB,CAAD,IAAOvB,UAAU,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV,CAH7B;AAIE,MAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,YAFF,EAQGlB,OAAO,gBACN;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADM,gBAGN;AAAQ,MAAA,OAAO,EAAEE,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ,EAaGR,IAAI,gBAAG;AAAA,2BAAUA,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAyB,qCAbhC,EAcGE,WAAW,gBAAG;AAAA,kCAAiBA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAuC,qCAdrD,EAeGE,KAAK,gBAAG;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAiB,MAAA,GAAG,EAAC,OAArB;AAA6B,MAAA,SAAS,EAAC;AAAvC;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAuD,qCAf/D;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA5CM;;GAAMT,a;;KAAAA,a","sourcesContent":["import { useState } from \"react\";\r\n\r\nexport const ERC721Checker = ({ bunzz, userAddress }) => {\r\n  const [tokenId, setTokenId] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [onGoing, setOnGoing] = useState(false);\r\n\r\n  const submit = async () => {\r\n    setOnGoing(true);\r\n    try {\r\n      const contract = await bunzz.getContract(\"NFT (IPFS Mintable)\");\r\n      const { data: tokenUri } = await contract.tokenURI(tokenId);\r\n      const url = tokenUri.replace(/^ipfs:\\/\\//, \"https://ipfs.io/ipfs/\");\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      setName(data.name);\r\n      setDescription(data.description);\r\n      setImage(data.image.replace(/^ipfs:\\/\\//, \"https://ipfs.io/ipfs/\"));\r\n    } catch (err) {\r\n      console.error(err);\r\n    } finally {\r\n      setOnGoing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <p className=\"title\">Step2: Get your NFT</p>\r\n      <input\r\n        placeholder=\"token ID\"\r\n        value={tokenId}\r\n        onChange={(e) => setTokenId(e.target.value)}\r\n        type=\"text\"\r\n      />\r\n      {onGoing ? (\r\n        <div className=\"center\">Loading...</div>\r\n      ) : (\r\n        <button onClick={submit}>get</button>\r\n      )}\r\n      {name ? <p>Name: {name}</p> : <></>}\r\n      {description ? <p>Description: {description}</p> : <></>}\r\n      {image ? <img src={image} alt=\"image\" className=\"image\" /> : <></>}\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}