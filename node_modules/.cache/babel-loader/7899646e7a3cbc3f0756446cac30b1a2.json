{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC3\\\\Documents\\\\WEB3\\\\bunzzhack\\\\erc721-minting-boilerplate\\\\react\\\\src\\\\components\\\\Home.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = ({\n  marketplace,\n  nft\n}) => {\n  _s();\n\n  const [loading, setLoading] = useState(true);\n  const [items, setItems] = useState([]);\n\n  const loadMarketplaceItems = async () => {\n    // Load all unsold items\n    const itemCount = await marketplace.itemCount();\n    let items = [];\n\n    for (let i = 1; i <= itemCount; i++) {\n      const item = await marketplace.items(i);\n\n      if (!item.sold) {\n        // get uri url from nft contract\n        const uri = await nft.tokenURI(item.tokenId); // use uri to fetch the nft metadata stored on ipfs \n\n        const response = await fetch(uri);\n        const metadata = await response.json(); // get total price of item (item price + fee)\n\n        const totalPrice = await marketplace.getTotalPrice(item.itemId); // Add item to items array\n\n        items.push({\n          totalPrice,\n          itemId: item.itemId,\n          seller: item.seller,\n          name: metadata.name,\n          description: metadata.description,\n          image: metadata.image\n        });\n      }\n    }\n\n    setLoading(false);\n    setItems(items);\n  };\n\n  const buyMarketItem = async item => {\n    await (await marketplace.purchaseItem(item.itemId, {\n      value: item.totalPrice\n    })).wait();\n    loadMarketplaceItems();\n  };\n\n  useEffect(() => {\n    loadMarketplaceItems();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"main\", {\n    style: {\n      padding: \"1rem 0\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n  return (\n    /*#__PURE__*/\n    // <div className=\"flex justify-center\">\n    //   {items.length > 0 ?\n    //     <div className=\"px-5 container\">\n    //       <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n    //         {items.map((item, idx) => (\n    //           <Col key={idx} className=\"overflow-hidden\">\n    //             <Card>\n    //               <Card.Img variant=\"top\" src={item.image} />\n    //               <Card.Body color=\"secondary\">\n    //                 <Card.Title>{item.name}</Card.Title>\n    //                 <Card.Text>\n    //                   {item.description}\n    //                 </Card.Text>\n    //               </Card.Body>\n    //               <Card.Footer>\n    //                 <div className='d-grid'>\n    //                   <Button onClick={() => buyMarketItem(item)} variant=\"primary\" size=\"lg\">\n    //                     Buy for {ethers.utils.formatEther(item.totalPrice)} ETH\n    //                   </Button>\n    //                 </div>\n    //               </Card.Footer>\n    //             </Card>\n    //           </Col>\n    //         ))}\n    //       </Row>\n    //     </div>\n    //     : (\n    //       <main style={{ padding: \"1rem 0\" }}>\n    //         <h2>No listed assets</h2>\n    //       </main>\n    //     )}\n    // </div>\n    _jsxDEV(\"h2\", {\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(Home, \"X4x04bf2XOIdWC9JIzBW7u2/seA=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/PC3/Documents/WEB3/bunzzhack/erc721-minting-boilerplate/react/src/components/Home.jsx"],"names":["useState","useEffect","ethers","Row","Col","Card","Button","Home","marketplace","nft","loading","setLoading","items","setItems","loadMarketplaceItems","itemCount","i","item","sold","uri","tokenURI","tokenId","response","fetch","metadata","json","totalPrice","getTotalPrice","itemId","push","seller","name","description","image","buyMarketItem","purchaseItem","value","wait","padding"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,MAAzB,QAAuC,iBAAvC;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAA0B;AAAA;;AACrC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;;AACA,QAAMc,oBAAoB,GAAG,YAAY;AACvC;AACA,UAAMC,SAAS,GAAG,MAAMP,WAAW,CAACO,SAAZ,EAAxB;AACA,QAAIH,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAID,SAArB,EAAgCC,CAAC,EAAjC,EAAqC;AACnC,YAAMC,IAAI,GAAG,MAAMT,WAAW,CAACI,KAAZ,CAAkBI,CAAlB,CAAnB;;AACA,UAAI,CAACC,IAAI,CAACC,IAAV,EAAgB;AACd;AACA,cAAMC,GAAG,GAAG,MAAMV,GAAG,CAACW,QAAJ,CAAaH,IAAI,CAACI,OAAlB,CAAlB,CAFc,CAGd;;AACA,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,CAA5B;AACA,cAAMK,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB,CALc,CAMd;;AACA,cAAMC,UAAU,GAAG,MAAMlB,WAAW,CAACmB,aAAZ,CAA0BV,IAAI,CAACW,MAA/B,CAAzB,CAPc,CAQd;;AACAhB,QAAAA,KAAK,CAACiB,IAAN,CAAW;AACTH,UAAAA,UADS;AAETE,UAAAA,MAAM,EAAEX,IAAI,CAACW,MAFJ;AAGTE,UAAAA,MAAM,EAAEb,IAAI,CAACa,MAHJ;AAITC,UAAAA,IAAI,EAAEP,QAAQ,CAACO,IAJN;AAKTC,UAAAA,WAAW,EAAER,QAAQ,CAACQ,WALb;AAMTC,UAAAA,KAAK,EAAET,QAAQ,CAACS;AANP,SAAX;AAQD;AACF;;AACDtB,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,GA3BD;;AA6BA,QAAMsB,aAAa,GAAG,MAAOjB,IAAP,IAAgB;AACpC,UAAM,CAAC,MAAMT,WAAW,CAAC2B,YAAZ,CAAyBlB,IAAI,CAACW,MAA9B,EAAsC;AAAEQ,MAAAA,KAAK,EAAEnB,IAAI,CAACS;AAAd,KAAtC,CAAP,EAA0EW,IAA1E,EAAN;AACAvB,IAAAA,oBAAoB;AACrB,GAHD;;AAKAb,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,oBAAoB;AACrB,GAFQ,EAEN,EAFM,CAAT;AAGA,MAAIJ,OAAJ,EAAa,oBACX;AAAM,IAAA,KAAK,EAAE;AAAE4B,MAAAA,OAAO,EAAE;AAAX,KAAb;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADW;AAKb;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjCF;AAmCD,CAhFD;;GAAM/B,I;;KAAAA,I;AAiFN,eAAeA,IAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { ethers } from \"ethers\"\r\nimport { Row, Col, Card, Button } from 'react-bootstrap'\r\n\r\nconst Home = ({ marketplace, nft }) => {\r\n  const [loading, setLoading] = useState(true)\r\n  const [items, setItems] = useState([])\r\n  const loadMarketplaceItems = async () => {\r\n    // Load all unsold items\r\n    const itemCount = await marketplace.itemCount()\r\n    let items = []\r\n    for (let i = 1; i <= itemCount; i++) {\r\n      const item = await marketplace.items(i)\r\n      if (!item.sold) {\r\n        // get uri url from nft contract\r\n        const uri = await nft.tokenURI(item.tokenId)\r\n        // use uri to fetch the nft metadata stored on ipfs \r\n        const response = await fetch(uri)\r\n        const metadata = await response.json()\r\n        // get total price of item (item price + fee)\r\n        const totalPrice = await marketplace.getTotalPrice(item.itemId)\r\n        // Add item to items array\r\n        items.push({\r\n          totalPrice,\r\n          itemId: item.itemId,\r\n          seller: item.seller,\r\n          name: metadata.name,\r\n          description: metadata.description,\r\n          image: metadata.image\r\n        })\r\n      }\r\n    }\r\n    setLoading(false)\r\n    setItems(items)\r\n  }\r\n\r\n  const buyMarketItem = async (item) => {\r\n    await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\r\n    loadMarketplaceItems()\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadMarketplaceItems()\r\n  }, [])\r\n  if (loading) return (\r\n    <main style={{ padding: \"1rem 0\" }}>\r\n      <h2>Loading...</h2>\r\n    </main>\r\n  )\r\n  return (\r\n    // <div className=\"flex justify-center\">\r\n    //   {items.length > 0 ?\r\n    //     <div className=\"px-5 container\">\r\n    //       <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\r\n    //         {items.map((item, idx) => (\r\n    //           <Col key={idx} className=\"overflow-hidden\">\r\n    //             <Card>\r\n    //               <Card.Img variant=\"top\" src={item.image} />\r\n    //               <Card.Body color=\"secondary\">\r\n    //                 <Card.Title>{item.name}</Card.Title>\r\n    //                 <Card.Text>\r\n    //                   {item.description}\r\n    //                 </Card.Text>\r\n    //               </Card.Body>\r\n    //               <Card.Footer>\r\n    //                 <div className='d-grid'>\r\n    //                   <Button onClick={() => buyMarketItem(item)} variant=\"primary\" size=\"lg\">\r\n    //                     Buy for {ethers.utils.formatEther(item.totalPrice)} ETH\r\n    //                   </Button>\r\n    //                 </div>\r\n    //               </Card.Footer>\r\n    //             </Card>\r\n    //           </Col>\r\n    //         ))}\r\n    //       </Row>\r\n    //     </div>\r\n    //     : (\r\n    //       <main style={{ padding: \"1rem 0\" }}>\r\n    //         <h2>No listed assets</h2>\r\n    //       </main>\r\n    //     )}\r\n    // </div>\r\n    <h2>Home</h2>\r\n  );\r\n}\r\nexport default Home"]},"metadata":{},"sourceType":"module"}