{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC3\\\\Documents\\\\WEB3\\\\bunzzhack\\\\erc721-minting-boilerplate\\\\react\\\\src\\\\components\\\\Home.jsx\";\nimport { useState, useEffect } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Col, Card, Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = ({\n  marketplace,\n  nft\n}) => {\n  // const [loading, setLoading] = useState(true)\n  // const [items, setItems] = useState([])\n  // const loadMarketplaceItems = async () => {\n  //   // Load all unsold items\n  //   const itemCount = await marketplace.itemCount()\n  //   let items = []\n  //   for (let i = 1; i <= itemCount; i++) {\n  //     const item = await marketplace.items(i)\n  //     if (!item.sold) {\n  //       // get uri url from nft contract\n  //       const uri = await nft.tokenURI(item.tokenId)\n  //       // use uri to fetch the nft metadata stored on ipfs \n  //       const response = await fetch(uri)\n  //       const metadata = await response.json()\n  //       // get total price of item (item price + fee)\n  //       const totalPrice = await marketplace.getTotalPrice(item.itemId)\n  //       // Add item to items array\n  //       items.push({\n  //         totalPrice,\n  //         itemId: item.itemId,\n  //         seller: item.seller,\n  //         name: metadata.name,\n  //         description: metadata.description,\n  //         image: metadata.image\n  //       })\n  //     }\n  //   }\n  //   setLoading(false)\n  //   setItems(items)\n  // }\n  // const buyMarketItem = async (item) => {\n  //   await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\n  //   loadMarketplaceItems()\n  // }\n  // useEffect(() => {\n  //   loadMarketplaceItems()\n  // }, [])\n  // if (loading) return (\n  //   <main style={{ padding: \"1rem 0\" }}>\n  //     <h2>Loading...</h2>\n  //   </main>\n  // )\n  return (\n    /*#__PURE__*/\n    // <div className=\"flex justify-center\">\n    //   {items.length > 0 ?\n    //     <div className=\"px-5 container\">\n    //       <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n    //         {items.map((item, idx) => (\n    //           <Col key={idx} className=\"overflow-hidden\">\n    //             <Card>\n    //               <Card.Img variant=\"top\" src={item.image} />\n    //               <Card.Body color=\"secondary\">\n    //                 <Card.Title>{item.name}</Card.Title>\n    //                 <Card.Text>\n    //                   {item.description}\n    //                 </Card.Text>\n    //               </Card.Body>\n    //               <Card.Footer>\n    //                 <div className='d-grid'>\n    //                   <Button onClick={() => buyMarketItem(item)} variant=\"primary\" size=\"lg\">\n    //                     Buy for {ethers.utils.formatEther(item.totalPrice)} ETH\n    //                   </Button>\n    //                 </div>\n    //               </Card.Footer>\n    //             </Card>\n    //           </Col>\n    //         ))}\n    //       </Row>\n    //     </div>\n    //     : (\n    //       <main style={{ padding: \"1rem 0\" }}>\n    //         <h2>No listed assets</h2>\n    //       </main>\n    //     )}\n    // </div>\n    _jsxDEV(\"h2\", {\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/PC3/Documents/WEB3/bunzzhack/erc721-minting-boilerplate/react/src/components/Home.jsx"],"names":["useState","useEffect","ethers","Row","Col","Card","Button","Home","marketplace","nft"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,MAAzB,QAAuC,iBAAvC;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAA0B;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjCF;AAmCD,CAhFD;;KAAMF,I;AAiFN,eAAeA,IAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { ethers } from \"ethers\"\r\nimport { Row, Col, Card, Button } from 'react-bootstrap'\r\n\r\nconst Home = ({ marketplace, nft }) => {\r\n  // const [loading, setLoading] = useState(true)\r\n  // const [items, setItems] = useState([])\r\n  // const loadMarketplaceItems = async () => {\r\n  //   // Load all unsold items\r\n  //   const itemCount = await marketplace.itemCount()\r\n  //   let items = []\r\n  //   for (let i = 1; i <= itemCount; i++) {\r\n  //     const item = await marketplace.items(i)\r\n  //     if (!item.sold) {\r\n  //       // get uri url from nft contract\r\n  //       const uri = await nft.tokenURI(item.tokenId)\r\n  //       // use uri to fetch the nft metadata stored on ipfs \r\n  //       const response = await fetch(uri)\r\n  //       const metadata = await response.json()\r\n  //       // get total price of item (item price + fee)\r\n  //       const totalPrice = await marketplace.getTotalPrice(item.itemId)\r\n  //       // Add item to items array\r\n  //       items.push({\r\n  //         totalPrice,\r\n  //         itemId: item.itemId,\r\n  //         seller: item.seller,\r\n  //         name: metadata.name,\r\n  //         description: metadata.description,\r\n  //         image: metadata.image\r\n  //       })\r\n  //     }\r\n  //   }\r\n  //   setLoading(false)\r\n  //   setItems(items)\r\n  // }\r\n\r\n  // const buyMarketItem = async (item) => {\r\n  //   await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\r\n  //   loadMarketplaceItems()\r\n  // }\r\n\r\n  // useEffect(() => {\r\n  //   loadMarketplaceItems()\r\n  // }, [])\r\n  // if (loading) return (\r\n  //   <main style={{ padding: \"1rem 0\" }}>\r\n  //     <h2>Loading...</h2>\r\n  //   </main>\r\n  // )\r\n  return (\r\n    // <div className=\"flex justify-center\">\r\n    //   {items.length > 0 ?\r\n    //     <div className=\"px-5 container\">\r\n    //       <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\r\n    //         {items.map((item, idx) => (\r\n    //           <Col key={idx} className=\"overflow-hidden\">\r\n    //             <Card>\r\n    //               <Card.Img variant=\"top\" src={item.image} />\r\n    //               <Card.Body color=\"secondary\">\r\n    //                 <Card.Title>{item.name}</Card.Title>\r\n    //                 <Card.Text>\r\n    //                   {item.description}\r\n    //                 </Card.Text>\r\n    //               </Card.Body>\r\n    //               <Card.Footer>\r\n    //                 <div className='d-grid'>\r\n    //                   <Button onClick={() => buyMarketItem(item)} variant=\"primary\" size=\"lg\">\r\n    //                     Buy for {ethers.utils.formatEther(item.totalPrice)} ETH\r\n    //                   </Button>\r\n    //                 </div>\r\n    //               </Card.Footer>\r\n    //             </Card>\r\n    //           </Col>\r\n    //         ))}\r\n    //       </Row>\r\n    //     </div>\r\n    //     : (\r\n    //       <main style={{ padding: \"1rem 0\" }}>\r\n    //         <h2>No listed assets</h2>\r\n    //       </main>\r\n    //     )}\r\n    // </div>\r\n    <h2>Home</h2>\r\n  );\r\n}\r\nexport default Home"]},"metadata":{},"sourceType":"module"}