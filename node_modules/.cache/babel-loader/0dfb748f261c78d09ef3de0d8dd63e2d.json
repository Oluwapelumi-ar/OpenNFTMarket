{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC3\\\\Documents\\\\WEB3\\\\bunzzhack\\\\erc721-minting-boilerplate\\\\react\\\\src\\\\components\\\\ERC721Minter.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { NFTStorage, File } from \"nft.storage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst nftStorage = new NFTStorage({\n  token: process.env.REACT_APP_NFT_STORAGE_KEY\n});\n\nconst store = async (name, description, data, fileName, type) => {\n  const metadata = await nftStorage.store({\n    name,\n    description,\n    image: new File([data], fileName, {\n      type\n    })\n  });\n  console.log(metadata);\n  return metadata;\n};\n\nexport const ERC721Minter = ({\n  bunzz,\n  userAddress\n}) => {\n  _s();\n\n  const [blob, setBlob] = useState(null);\n  const [fileName, setFileName] = useState(null);\n  const [base64, setBase64] = useState(null);\n  const [onGoing, setOnGoing] = useState(false);\n  const [tokenId, setTokenId] = useState(null);\n  const [type, setType] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  const select = e => {\n    const file = e.target.files[0];\n    console.log(file);\n\n    if (file) {\n      readAsBlob(file);\n      readAsBase64(file);\n      setType(file.type);\n      setFileName(file.name);\n    }\n  };\n\n  const readAsBlob = file => {\n    const reader = new FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onload = () => {\n      console.log(reader.result);\n      setBlob(reader.result);\n    };\n  };\n\n  const readAsBase64 = file => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => {\n      console.log(reader.result);\n      setBase64(reader.result);\n    };\n  };\n\n  const submit = async () => {\n    setOnGoing(true);\n\n    try {\n      const metadata = await store(name, description, blob, fileName, type);\n      const contract = await bunzz.getContract(\"NFT (IPFS Mintable)\");\n      const inputUrl = metadata.url.replace(/^ipfs:\\/\\//, \"\");\n      const tx = await contract.safeMint(userAddress, inputUrl);\n      const receipt = await tx.wait();\n      console.log(receipt);\n      const event = receipt.events[0];\n      const _tokenId = event.args[2];\n      setTokenId(_tokenId);\n      setBase64(null);\n      window.alert(\"Succeeded to mint\");\n    } catch (err) {\n      console.error(err);\n    } finally {\n      setOnGoing(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"title\",\n      children: \"Step1: Mint your NFT with IPFS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Token Name\",\n      value: name,\n      onChange: e => setName(e.target.value),\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Description\",\n      value: description,\n      onChange: e => setDescription(e.target.value),\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: select\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), base64 ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: base64,\n      alt: \"hoge\",\n      className: \"image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), onGoing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submit,\n      children: \"mint\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), tokenId ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"token ID: \", tokenId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ERC721Minter, \"Ntq0Af6gBoY8HjMHDQOodTJAFSA=\");\n\n_c = ERC721Minter;\n\nvar _c;\n\n$RefreshReg$(_c, \"ERC721Minter\");","map":{"version":3,"sources":["C:/Users/PC3/Documents/WEB3/bunzzhack/erc721-minting-boilerplate/react/src/components/ERC721Minter.jsx"],"names":["useState","NFTStorage","File","nftStorage","token","process","env","REACT_APP_NFT_STORAGE_KEY","store","name","description","data","fileName","type","metadata","image","console","log","ERC721Minter","bunzz","userAddress","blob","setBlob","setFileName","base64","setBase64","onGoing","setOnGoing","tokenId","setTokenId","setType","setName","setDescription","select","e","file","target","files","readAsBlob","readAsBase64","reader","FileReader","readAsArrayBuffer","onload","result","readAsDataURL","submit","contract","getContract","inputUrl","url","replace","tx","safeMint","receipt","wait","event","events","_tokenId","args","window","alert","err","error","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,aAAjC;;;AAEA,MAAMC,UAAU,GAAG,IAAIF,UAAJ,CAAe;AAChCG,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADa,CAAf,CAAnB;;AAIA,MAAMC,KAAK,GAAG,OAAOC,IAAP,EAAaC,WAAb,EAA0BC,IAA1B,EAAgCC,QAAhC,EAA0CC,IAA1C,KAAmD;AAC/D,QAAMC,QAAQ,GAAG,MAAMX,UAAU,CAACK,KAAX,CAAiB;AACtCC,IAAAA,IADsC;AAEtCC,IAAAA,WAFsC;AAGtCK,IAAAA,KAAK,EAAE,IAAIb,IAAJ,CAAS,CAACS,IAAD,CAAT,EAAiBC,QAAjB,EAA2B;AAAEC,MAAAA;AAAF,KAA3B;AAH+B,GAAjB,CAAvB;AAKAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,SAAOA,QAAP;AACD,CARD;;AAUA,OAAO,MAAMI,YAAY,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA4B;AAAA;;AACtD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBtB,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACY,QAAD,EAAWW,WAAX,IAA0BvB,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACwB,MAAD,EAASC,SAAT,IAAsBzB,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAAC0B,OAAD,EAAUC,UAAV,IAAwB3B,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAAC4B,OAAD,EAAUC,UAAV,IAAwB7B,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACa,IAAD,EAAOiB,OAAP,IAAkB9B,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOsB,OAAP,IAAkB/B,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,WAAD,EAAcsB,cAAd,IAAgChC,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMiC,MAAM,GAAIC,CAAD,IAAO;AACpB,UAAMC,IAAI,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;AACArB,IAAAA,OAAO,CAACC,GAAR,CAAYkB,IAAZ;;AAEA,QAAIA,IAAJ,EAAU;AACRG,MAAAA,UAAU,CAACH,IAAD,CAAV;AACAI,MAAAA,YAAY,CAACJ,IAAD,CAAZ;AACAL,MAAAA,OAAO,CAACK,IAAI,CAACtB,IAAN,CAAP;AACAU,MAAAA,WAAW,CAACY,IAAI,CAAC1B,IAAN,CAAX;AACD;AACF,GAVD;;AAYA,QAAM6B,UAAU,GAAIH,IAAD,IAAU;AAC3B,UAAMK,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,IAAAA,MAAM,CAACE,iBAAP,CAAyBP,IAAzB;;AACAK,IAAAA,MAAM,CAACG,MAAP,GAAgB,MAAM;AACpB3B,MAAAA,OAAO,CAACC,GAAR,CAAYuB,MAAM,CAACI,MAAnB;AACAtB,MAAAA,OAAO,CAACkB,MAAM,CAACI,MAAR,CAAP;AACD,KAHD;AAID,GAPD;;AASA,QAAML,YAAY,GAAIJ,IAAD,IAAU;AAC7B,UAAMK,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,IAAAA,MAAM,CAACK,aAAP,CAAqBV,IAArB;;AACAK,IAAAA,MAAM,CAACG,MAAP,GAAgB,MAAM;AACpB3B,MAAAA,OAAO,CAACC,GAAR,CAAYuB,MAAM,CAACI,MAAnB;AACAnB,MAAAA,SAAS,CAACe,MAAM,CAACI,MAAR,CAAT;AACD,KAHD;AAID,GAPD;;AASA,QAAME,MAAM,GAAG,YAAY;AACzBnB,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMb,QAAQ,GAAG,MAAMN,KAAK,CAACC,IAAD,EAAOC,WAAP,EAAoBW,IAApB,EAA0BT,QAA1B,EAAoCC,IAApC,CAA5B;AACA,YAAMkC,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,WAAN,CAAkB,qBAAlB,CAAvB;AACA,YAAMC,QAAQ,GAAGnC,QAAQ,CAACoC,GAAT,CAAaC,OAAb,CAAqB,YAArB,EAAmC,EAAnC,CAAjB;AAEA,YAAMC,EAAE,GAAG,MAAML,QAAQ,CAACM,QAAT,CAAkBjC,WAAlB,EAA+B6B,QAA/B,CAAjB;AACA,YAAMK,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACAvC,MAAAA,OAAO,CAACC,GAAR,CAAYqC,OAAZ;AAEA,YAAME,KAAK,GAAGF,OAAO,CAACG,MAAR,CAAe,CAAf,CAAd;AACA,YAAMC,QAAQ,GAAGF,KAAK,CAACG,IAAN,CAAW,CAAX,CAAjB;AACA9B,MAAAA,UAAU,CAAC6B,QAAD,CAAV;AACAjC,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAmC,MAAAA,MAAM,CAACC,KAAP,CAAa,mBAAb;AACD,KAdD,CAcE,OAAOC,GAAP,EAAY;AACZ9C,MAAAA,OAAO,CAAC+C,KAAR,CAAcD,GAAd;AACD,KAhBD,SAgBU;AACRnC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GArBD;;AAuBA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE;AAAG,MAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AACE,MAAA,WAAW,EAAC,YADd;AAEE,MAAA,KAAK,EAAElB,IAFT;AAGE,MAAA,QAAQ,EAAGyB,CAAD,IAAOH,OAAO,CAACG,CAAC,CAACE,MAAF,CAAS4B,KAAV,CAH1B;AAIE,MAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,YAJF,eAUE;AACE,MAAA,WAAW,EAAC,aADd;AAEE,MAAA,KAAK,EAAEtD,WAFT;AAGE,MAAA,QAAQ,EAAGwB,CAAD,IAAOF,cAAc,CAACE,CAAC,CAACE,MAAF,CAAS4B,KAAV,CAHjC;AAIE,MAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,YAVF,eAgBE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,MAAM,EAAC,SAA1B;AAAoC,MAAA,QAAQ,EAAE/B;AAA9C;AAAA;AAAA;AAAA;AAAA,YAhBF,EAiBGT,MAAM,gBACH;AAAK,MAAA,GAAG,EAAEA,MAAV;AAAkB,MAAA,GAAG,EAAC,MAAtB;AAA6B,MAAA,SAAS,EAAC;AAAvC;AAAA;AAAA;AAAA;AAAA,YADG,gBAGL,qCApBJ,EAsBGE,OAAO,gBACN;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADM,gBAKN;AAAQ,MAAA,OAAO,EAAEoB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA3BJ,EA+BGlB,OAAO,gBAAG;AAAA,+BAAcA,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAgC,qCA/B1C;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD,CAlGM;;GAAMV,Y;;KAAAA,Y","sourcesContent":["import { useState } from \"react\";\r\nimport { NFTStorage, File } from \"nft.storage\";\r\n\r\nconst nftStorage = new NFTStorage({\r\n  token: process.env.REACT_APP_NFT_STORAGE_KEY,\r\n});\r\n\r\nconst store = async (name, description, data, fileName, type) => {\r\n  const metadata = await nftStorage.store({\r\n    name,\r\n    description,\r\n    image: new File([data], fileName, { type }),\r\n  });\r\n  console.log(metadata);\r\n  return metadata;\r\n};\r\n\r\nexport const ERC721Minter = ({ bunzz, userAddress }) => {\r\n  const [blob, setBlob] = useState(null);\r\n  const [fileName, setFileName] = useState(null);\r\n  const [base64, setBase64] = useState(null);\r\n  const [onGoing, setOnGoing] = useState(false);\r\n  const [tokenId, setTokenId] = useState(null);\r\n  const [type, setType] = useState(null);\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  const select = (e) => {\r\n    const file = e.target.files[0];\r\n    console.log(file);\r\n\r\n    if (file) {\r\n      readAsBlob(file);\r\n      readAsBase64(file);\r\n      setType(file.type);\r\n      setFileName(file.name);\r\n    }\r\n  };\r\n\r\n  const readAsBlob = (file) => {\r\n    const reader = new FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onload = () => {\r\n      console.log(reader.result);\r\n      setBlob(reader.result);\r\n    };\r\n  };\r\n\r\n  const readAsBase64 = (file) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      console.log(reader.result);\r\n      setBase64(reader.result);\r\n    };\r\n  };\r\n\r\n  const submit = async () => {\r\n    setOnGoing(true);\r\n    try {\r\n      const metadata = await store(name, description, blob, fileName, type);\r\n      const contract = await bunzz.getContract(\"NFT (IPFS Mintable)\");\r\n      const inputUrl = metadata.url.replace(/^ipfs:\\/\\//, \"\");\r\n\r\n      const tx = await contract.safeMint(userAddress, inputUrl);\r\n      const receipt = await tx.wait();\r\n      console.log(receipt);\r\n\r\n      const event = receipt.events[0];\r\n      const _tokenId = event.args[2];\r\n      setTokenId(_tokenId);\r\n      setBase64(null);\r\n      window.alert(\"Succeeded to mint\");\r\n    } catch (err) {\r\n      console.error(err);\r\n    } finally {\r\n      setOnGoing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <p className=\"title\">\r\n        Step1: Mint your NFT with IPFS\r\n      </p>\r\n      <input\r\n        placeholder=\"Token Name\"\r\n        value={name}\r\n        onChange={(e) => setName(e.target.value)}\r\n        type=\"text\"\r\n      />\r\n      <input\r\n        placeholder=\"Description\"\r\n        value={description}\r\n        onChange={(e) => setDescription(e.target.value)}\r\n        type=\"text\"\r\n      />\r\n      <input type=\"file\" accept=\"image/*\" onChange={select} />\r\n      {base64 ? (\r\n          <img src={base64} alt=\"hoge\" className=\"image\" />\r\n      ) : (\r\n        <></>\r\n      )}\r\n      {onGoing ? (\r\n        <div className=\"center\">\r\n          Loading...\r\n        </div>\r\n      ) : (\r\n        <button onClick={submit}>\r\n          mint\r\n        </button>\r\n      )}\r\n      {tokenId ? <p>token ID: {tokenId}</p> : <></>}\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}