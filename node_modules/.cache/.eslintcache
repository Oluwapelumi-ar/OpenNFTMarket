[{"C:\\Users\\PC3\\Documents\\WEB3\\bunzzhack\\erc721-minting-boilerplate\\react\\src\\index.jsx":"1","C:\\Users\\PC3\\Documents\\WEB3\\bunzzhack\\erc721-minting-boilerplate\\react\\src\\App.jsx":"2","C:\\Users\\PC3\\Documents\\WEB3\\bunzzhack\\erc721-minting-boilerplate\\react\\src\\components\\ERC721Checker.jsx":"3","C:\\Users\\PC3\\Documents\\WEB3\\bunzzhack\\erc721-minting-boilerplate\\react\\src\\components\\ERC721Minter.jsx":"4","C:\\Users\\PC3\\Documents\\WEB3\\bunzzhack\\erc721-minting-boilerplate\\react\\src\\components\\Create.jsx":"5","C:\\Users\\PC3\\Documents\\WEB3\\bunzzhack\\erc721-minting-boilerplate\\react\\src\\components\\Navbar.jsx":"6","C:\\Users\\PC3\\Documents\\WEB3\\bunzzhack\\erc721-minting-boilerplate\\react\\src\\components\\Home.jsx":"7"},{"size":358,"mtime":1668548781949,"results":"8","hashOfConfig":"9"},{"size":1745,"mtime":1668548434100,"results":"10","hashOfConfig":"9"},{"size":1539,"mtime":1668544764240,"results":"11","hashOfConfig":"9"},{"size":3127,"mtime":1668544764241,"results":"12","hashOfConfig":"9"},{"size":5412,"mtime":1668548318876,"results":"13","hashOfConfig":"9"},{"size":1877,"mtime":1668548340750,"results":"14","hashOfConfig":"9"},{"size":3067,"mtime":1668548737916,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ex7dzm",{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"C:\\Users\\PC3\\Documents\\WEB3\\bunzzhack\\erc721-minting-boilerplate\\react\\src\\index.jsx",[],"C:\\Users\\PC3\\Documents\\WEB3\\bunzzhack\\erc721-minting-boilerplate\\react\\src\\App.jsx",["36","37","38"],"import { useEffect, useState } from \"react\";\r\nimport { BrowserRouter as Router,Routes, Route, Link } from 'react-router-dom';\r\n\r\nimport { ERC721Minter } from \"./components/ERC721Minter\";\r\nimport { ERC721Checker } from \"./components/ERC721Checker\";\r\nimport bunzz from \"bunzz-sdk\";\r\nimport Create from \"./components/Create\";\r\nimport Navigation from \"./components/Navbar\";\r\nimport Home from \"./components/Home\";\r\n\r\nconst DAPP_ID = '3318d97a-cc9a-47c0-bbf5-58a747d2886d';\r\nconst API_KEY = '4ee2d15b-f620-471e-b018-a6ffaa88bb8c';\r\n\r\nconst App = () => {\r\n  const [handler, setHandler] = useState();\r\n  const [userAddress, setUserAddress] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setup()\r\n  }, [])\r\n\r\n  const setup = async () => {\r\n    const handler = await bunzz.initializeHandler({\r\n      dappId: DAPP_ID,\r\n      apiKey: API_KEY,\r\n    });\r\n\r\n    const userAddress = await handler.getSignerAddress();\r\n\r\n    console.log(userAddress);\r\n    setUserAddress(userAddress);\r\n    setHandler(handler);\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Router>\r\n    <>\r\n       <Navigation  />\r\n     </>\r\n     <Routes>\r\n              <Route path=\"/\" element={\r\n                <Home  />\r\n              } />\r\n              <Route path=\"/create\" element={\r\n                <Create bunzz={handler} userAddress={userAddress} />\r\n              } />\r\n              {/* <Route path=\"/my-listed-items\" element={\r\n                <MyListedItems marketplace={marketplace} nft={nft} account={account} />\r\n              } />\r\n              <Route path=\"/my-purchases\" element={\r\n                <MyPurchases marketplace={marketplace} nft={nft} account={account} />\r\n              } /> */}\r\n            </Routes>\r\n\r\n    </Router>\r\n     \r\n   \r\n \r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n",["39","40"],"C:\\Users\\PC3\\Documents\\WEB3\\bunzzhack\\erc721-minting-boilerplate\\react\\src\\components\\ERC721Checker.jsx",["41"],"import { useState } from \"react\";\r\n\r\nexport const ERC721Checker = ({ bunzz, userAddress }) => {\r\n  const [tokenId, setTokenId] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [onGoing, setOnGoing] = useState(false);\r\n\r\n  const submit = async () => {\r\n    setOnGoing(true);\r\n    try {\r\n      const contract = await bunzz.getContract(\"NFT (IPFS Mintable)\");\r\n      const { data: tokenUri } = await contract.tokenURI(tokenId);\r\n      const url = tokenUri.replace(/^ipfs:\\/\\//, \"https://ipfs.io/ipfs/\");\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      setName(data.name);\r\n      setDescription(data.description);\r\n      setImage(data.image.replace(/^ipfs:\\/\\//, \"https://ipfs.io/ipfs/\"));\r\n    } catch (err) {\r\n      console.error(err);\r\n    } finally {\r\n      setOnGoing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <p className=\"title\">Step2: Get your NFT</p>\r\n      <input\r\n        placeholder=\"token ID\"\r\n        value={tokenId}\r\n        onChange={(e) => setTokenId(e.target.value)}\r\n        type=\"text\"\r\n      />\r\n      {onGoing ? (\r\n        <div className=\"center\">Loading...</div>\r\n      ) : (\r\n        <button onClick={submit}>get</button>\r\n      )}\r\n      {name ? <p>Name: {name}</p> : <></>}\r\n      {description ? <p>Description: {description}</p> : <></>}\r\n      {image ? <img src={image} alt=\"image\" className=\"image\" /> : <></>}\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\PC3\\Documents\\WEB3\\bunzzhack\\erc721-minting-boilerplate\\react\\src\\components\\ERC721Minter.jsx",[],"C:\\Users\\PC3\\Documents\\WEB3\\bunzzhack\\erc721-minting-boilerplate\\react\\src\\components\\Create.jsx",["42","43","44","45","46","47","48","49","50","51"],"import React from 'react';\r\nimport { useState } from \"react\";\r\nimport { useEffect } from 'react';\r\nimport { NFTStorage, File } from \"nft.storage\";\r\n\r\nconst nftStorage = new NFTStorage({\r\n  token: process.env.REACT_APP_NFT_STORAGE_KEY,\r\n});\r\n\r\nconst store = async (name, description, data, fileName, type) => {\r\n  const metadata = await nftStorage.store({\r\n    name,\r\n    description,\r\n    image: new File([data], fileName, { type }),\r\n  });\r\n  console.log(metadata);\r\n  return metadata;\r\n};\r\n\r\nexport default function Create({ bunzz, userAddress }) {\r\n\r\n  const [blob, setBlob] = useState(null);\r\n  const [fileName, setFileName] = useState(null);\r\n  const [base64, setBase64] = useState(null);\r\n  const [onGoing, setOnGoing] = useState(false);\r\n  const [tokenId, setTokenId] = useState(81);\r\n  const [type, setType] = useState(null);\r\n  const [name, setName] = useState(\"\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  let [increment, setIncrement]=useState(0)\r\n\r\n  \r\n  // useEffect(() => {\r\n  //   window.localStorage.setItem('tokenId', tokenId);\r\n  // }, [tokenId]);\r\n\r\n\r\n  // useEffect(() => {\r\n  //   setTokenId(JSON.parse(window.localStorage.getItem('tokenId')));\r\n  // }, []);\r\n\r\n  \r\n\r\n  const select = (e) => {\r\n    const file = e.target.files[0];\r\n    console.log(file);\r\n\r\n    if (file) {\r\n      readAsBlob(file);\r\n      readAsBase64(file);\r\n      setType(file.type);\r\n      setFileName(file.name);\r\n    }\r\n  };\r\n\r\n  const readAsBlob = (file) => {\r\n    const reader = new FileReader();\r\n    reader.readAsArrayBuffer(file);\r\n    reader.onload = () => {\r\n      console.log(reader.result);\r\n      setBlob(reader.result);\r\n    };\r\n  };\r\n\r\n  const readAsBase64 = (file) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      console.log(reader.result);\r\n      setBase64(reader.result);\r\n    };\r\n  };\r\n\r\n  const mintNFT = async () => {\r\n    console.log('tokenId',tokenId)\r\n\r\n    try {\r\nconst contract = await bunzz.getContract(\"NFT (ERC721)\")\r\n\r\n      const tx = await contract.mint(userAddress, tokenId);\r\n      const receipt = await tx.wait();\r\n      const event = receipt.events[0];\r\n      const _tokenId = event.args[2];\r\n      console.log('increment1',increment)\r\n\r\n    \r\n      setTokenId(tokenId +1);\r\n      console.log('tokenId',tokenId)\r\n      await approve();\r\n\r\n      list();\r\n\r\n      setBase64(null);\r\n      window.alert(\"Succeeded to mint\");\r\n\r\n      console.log('receipt',receipt.events);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  const getListing = async () => {\r\n    try {\r\n      console.log('grtToken')\r\n      const contract = await bunzz.getContract(\"Simple Marketplace (For NFT)\");\r\n      const tx = await contract.getToken(\"4\");\r\n      console.log('grtToken')\r\n\r\n      const receipt = await tx.wait();\r\n  \r\n      console.log('listings',receipt.events);\r\n      \r\n    } catch (error) {\r\n      \r\n    }\r\n  }\r\n\r\n\r\n  const getBalance = async () => {\r\n\r\n    try {\r\nconst contract = await bunzz.getContract(\"NFT (ERC721)\")\r\n\r\n      const res = await contract.balanceOf(userAddress);\r\n      console.log('balance',res);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  const list = async () => {\r\n    try{\r\n      \r\n      const contract = await bunzz.getContract(\"Simple Marketplace (For NFT)\");\r\n      const tx = await contract.list(0,20);\r\n      const receipt = await tx.wait();\r\n  \r\n      console.log('list receipt',receipt.events);\r\n    }catch (err) {\r\n      console.error(err);\r\n    }\r\n\r\n  }\r\n\r\n  const approve = async () => {\r\n    try {\r\n      const contract = await bunzz.getContract(\"NFT (ERC721)\")\r\n      \r\n            const res = await contract.approve('0xed3B8a112C2dA5A30BAbdED140b77Cb6F900fBa9',tokenId);\r\n            console.log('approve',res);\r\n          } catch (err) {\r\n            console.error(err);\r\n          }\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"container-fluid mt-5\">\r\n      <div className=\"row\">\r\n        <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\r\n          <div className=\"content mx-auto\">\r\n            <div className=\"g-4 row\">\r\n            <input type=\"file\" accept=\"image/*\" onChange={select} />\r\n      {base64 ? (\r\n          <img src={base64} alt=\"hoge\" className=\"image\" />\r\n      ) : (\r\n        <></>\r\n      )}\r\n              <input  size=\"lg\" required type=\"text\" placeholder=\"Name\"\r\n        value={name}\r\n        onChange={(e) => setName(e.target.value)}\r\n        />\r\n              <input  size=\"lg\" required as=\"textarea\" placeholder=\"Description\" value={description}\r\n        onChange={(e) => setDescription(e.target.value)}/>\r\n              <input  size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" value={price}\r\n        onChange={(e) => setPrice(e.target.value)}/>\r\n              <div className=\"d-grid px-0\">\r\n                <button onClick={mintNFT}  type=\"button\" class=\"btn btn-primary\">\r\n                  Create & List NFT!\r\n                </button>\r\n                <button onClick={getListing}  type=\"button\" class=\"btn btn-primary\">\r\n                getListing\r\n                </button>\r\n                <button onClick={list}  type=\"button\" class=\"btn btn-primary\">\r\n                list\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","C:\\Users\\PC3\\Documents\\WEB3\\bunzzhack\\erc721-minting-boilerplate\\react\\src\\components\\Navbar.jsx",["52"],"import {\r\n  Link\r\n} from \"react-router-dom\";\r\nimport { Navbar, Nav, Button, Container } from 'react-bootstrap'\r\n\r\nconst Navigation = () => {\r\n  return (\r\n      <Navbar expand=\"lg\" bg=\"secondary\" variant=\"dark\">\r\n          <Container>\r\n              <Navbar.Brand href=\"http://www.dappuniversity.com/bootcamp\">\r\n                  {/* <img src={market} width=\"40\" height=\"40\" className=\"\" alt=\"\" /> */}\r\n                  &nbsp; Open NFT Marketplace\r\n              </Navbar.Brand>\r\n              <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n              <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                  <Nav className=\"me-auto\">\r\n                      <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\r\n                      <Nav.Link as={Link} to=\"/create\">Create</Nav.Link>\r\n                      <Nav.Link as={Link} to=\"/my-listed-items\">My Listed Items</Nav.Link>\r\n                      <Nav.Link as={Link} to=\"/my-purchases\">My Purchases</Nav.Link>\r\n                  </Nav>\r\n                  {/* <Nav>\r\n                      {account ? (\r\n                          <Nav.Link\r\n                              href={`https://etherscan.io/address/${account}`}\r\n                              target=\"_blank\"\r\n                              rel=\"noopener noreferrer\"\r\n                              className=\"button nav-button btn-sm mx-4\">\r\n                              <Button variant=\"outline-light\">\r\n                                  {account.slice(0, 5) + '...' + account.slice(38, 42)}\r\n                              </Button>\r\n\r\n                          </Nav.Link>\r\n                      ) : (\r\n                          <Button  variant=\"outline-light\">Connect Wallet</Button>\r\n                      )}\r\n                  </Nav> */}\r\n              </Navbar.Collapse>\r\n          </Container>\r\n      </Navbar>\r\n  )\r\n\r\n}\r\n\r\nexport default Navigation;","C:\\Users\\PC3\\Documents\\WEB3\\bunzzhack\\erc721-minting-boilerplate\\react\\src\\components\\Home.jsx",["53","54","55","56","57","58","59"],"import { useState, useEffect } from 'react'\r\nimport { ethers } from \"ethers\"\r\nimport { Row, Col, Card, Button } from 'react-bootstrap'\r\n\r\nconst Home = ({ marketplace, nft }) => {\r\n  // const [loading, setLoading] = useState(true)\r\n  // const [items, setItems] = useState([])\r\n  // const loadMarketplaceItems = async () => {\r\n  //   // Load all unsold items\r\n  //   const itemCount = await marketplace.itemCount()\r\n  //   let items = []\r\n  //   for (let i = 1; i <= itemCount; i++) {\r\n  //     const item = await marketplace.items(i)\r\n  //     if (!item.sold) {\r\n  //       // get uri url from nft contract\r\n  //       const uri = await nft.tokenURI(item.tokenId)\r\n  //       // use uri to fetch the nft metadata stored on ipfs \r\n  //       const response = await fetch(uri)\r\n  //       const metadata = await response.json()\r\n  //       // get total price of item (item price + fee)\r\n  //       const totalPrice = await marketplace.getTotalPrice(item.itemId)\r\n  //       // Add item to items array\r\n  //       items.push({\r\n  //         totalPrice,\r\n  //         itemId: item.itemId,\r\n  //         seller: item.seller,\r\n  //         name: metadata.name,\r\n  //         description: metadata.description,\r\n  //         image: metadata.image\r\n  //       })\r\n  //     }\r\n  //   }\r\n  //   setLoading(false)\r\n  //   setItems(items)\r\n  // }\r\n\r\n  // const buyMarketItem = async (item) => {\r\n  //   await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\r\n  //   loadMarketplaceItems()\r\n  // }\r\n\r\n  // useEffect(() => {\r\n  //   loadMarketplaceItems()\r\n  // }, [])\r\n  // if (loading) return (\r\n  //   <main style={{ padding: \"1rem 0\" }}>\r\n  //     <h2>Loading...</h2>\r\n  //   </main>\r\n  // )\r\n  return (\r\n    // <div className=\"flex justify-center\">\r\n    //   {items.length > 0 ?\r\n    //     <div className=\"px-5 container\">\r\n    //       <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\r\n    //         {items.map((item, idx) => (\r\n    //           <Col key={idx} className=\"overflow-hidden\">\r\n    //             <Card>\r\n    //               <Card.Img variant=\"top\" src={item.image} />\r\n    //               <Card.Body color=\"secondary\">\r\n    //                 <Card.Title>{item.name}</Card.Title>\r\n    //                 <Card.Text>\r\n    //                   {item.description}\r\n    //                 </Card.Text>\r\n    //               </Card.Body>\r\n    //               <Card.Footer>\r\n    //                 <div className='d-grid'>\r\n    //                   <Button onClick={() => buyMarketItem(item)} variant=\"primary\" size=\"lg\">\r\n    //                     Buy for {ethers.utils.formatEther(item.totalPrice)} ETH\r\n    //                   </Button>\r\n    //                 </div>\r\n    //               </Card.Footer>\r\n    //             </Card>\r\n    //           </Col>\r\n    //         ))}\r\n    //       </Row>\r\n    //     </div>\r\n    //     : (\r\n    //       <main style={{ padding: \"1rem 0\" }}>\r\n    //         <h2>No listed assets</h2>\r\n    //       </main>\r\n    //     )}\r\n    // </div>\r\n    <h2>Home</h2>\r\n  );\r\n}\r\nexport default Home",{"ruleId":"60","severity":1,"message":"61","line":2,"column":49,"nodeType":"62","messageId":"63","endLine":2,"endColumn":53},{"ruleId":"60","severity":1,"message":"64","line":4,"column":10,"nodeType":"62","messageId":"63","endLine":4,"endColumn":22},{"ruleId":"60","severity":1,"message":"65","line":5,"column":10,"nodeType":"62","messageId":"63","endLine":5,"endColumn":23},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":44,"column":16,"nodeType":"72","endLine":44,"endColumn":65},{"ruleId":"60","severity":1,"message":"73","line":3,"column":10,"nodeType":"62","messageId":"63","endLine":3,"endColumn":19},{"ruleId":"60","severity":1,"message":"74","line":10,"column":7,"nodeType":"62","messageId":"63","endLine":10,"endColumn":12},{"ruleId":"60","severity":1,"message":"75","line":22,"column":10,"nodeType":"62","messageId":"63","endLine":22,"endColumn":14},{"ruleId":"60","severity":1,"message":"76","line":23,"column":10,"nodeType":"62","messageId":"63","endLine":23,"endColumn":18},{"ruleId":"60","severity":1,"message":"77","line":25,"column":10,"nodeType":"62","messageId":"63","endLine":25,"endColumn":17},{"ruleId":"60","severity":1,"message":"78","line":25,"column":19,"nodeType":"62","messageId":"63","endLine":25,"endColumn":29},{"ruleId":"60","severity":1,"message":"79","line":27,"column":10,"nodeType":"62","messageId":"63","endLine":27,"endColumn":14},{"ruleId":"60","severity":1,"message":"80","line":31,"column":19,"nodeType":"62","messageId":"63","endLine":31,"endColumn":31},{"ruleId":"60","severity":1,"message":"81","line":84,"column":13,"nodeType":"62","messageId":"63","endLine":84,"endColumn":21},{"ruleId":"60","severity":1,"message":"82","line":120,"column":9,"nodeType":"62","messageId":"63","endLine":120,"endColumn":19},{"ruleId":"60","severity":1,"message":"83","line":4,"column":23,"nodeType":"62","messageId":"63","endLine":4,"endColumn":29},{"ruleId":"60","severity":1,"message":"84","line":1,"column":10,"nodeType":"62","messageId":"63","endLine":1,"endColumn":18},{"ruleId":"60","severity":1,"message":"73","line":1,"column":20,"nodeType":"62","messageId":"63","endLine":1,"endColumn":29},{"ruleId":"60","severity":1,"message":"85","line":2,"column":10,"nodeType":"62","messageId":"63","endLine":2,"endColumn":16},{"ruleId":"60","severity":1,"message":"86","line":3,"column":10,"nodeType":"62","messageId":"63","endLine":3,"endColumn":13},{"ruleId":"60","severity":1,"message":"87","line":3,"column":15,"nodeType":"62","messageId":"63","endLine":3,"endColumn":18},{"ruleId":"60","severity":1,"message":"88","line":3,"column":20,"nodeType":"62","messageId":"63","endLine":3,"endColumn":24},{"ruleId":"60","severity":1,"message":"83","line":3,"column":26,"nodeType":"62","messageId":"63","endLine":3,"endColumn":32},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'ERC721Minter' is defined but never used.","'ERC721Checker' is defined but never used.","no-native-reassign",["89"],"no-negated-in-lhs",["90"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useEffect' is defined but never used.","'store' is assigned a value but never used.","'blob' is assigned a value but never used.","'fileName' is assigned a value but never used.","'onGoing' is assigned a value but never used.","'setOnGoing' is assigned a value but never used.","'type' is assigned a value but never used.","'setIncrement' is assigned a value but never used.","'_tokenId' is assigned a value but never used.","'getBalance' is assigned a value but never used.","'Button' is defined but never used.","'useState' is defined but never used.","'ethers' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Card' is defined but never used.","no-global-assign","no-unsafe-negation"]